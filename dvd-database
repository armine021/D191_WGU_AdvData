-- create procedure to generate required reports on low frequency customers
-- to execute, enter "call total_rentals_reports();"
CREATE OR REPLACE PROCEDURE total_rentals_reports()
language plpgsql
AS $BODY$
begin

-- erase the table if it already exists (ensures data is current to the date query is performed)
DROP TABLE IF EXISTS customer_details;

-- create the empty table
CREATE TABLE IF NOT EXISTS customer_details (
	customer_id INT NOT NULL,
	email VARCHAR,
	postal_code VARCHAR,
	national_area VARCHAR,
	customer_total_rentals INT,
	customer_sent_discount BOOLEAN DEFAULT false
);

-- add values to the table from existing ones in the database
INSERT INTO customer_details
SELECT
	customer.customer_id,
	customer.email,
	address.postal_code,
	substr(address.postal_code, 1, 1),
	count(rental.customer_id) as customer_total_rentals
FROM
	rental
-- inner join using the customer ID across 3 tables (customer, rental, and address)
INNER JOIN customer
	ON customer.customer_id = rental.customer_id
INNER JOIN address
	ON customer.address_id = address.address_id
GROUP BY customer.customer_id, address.postal_code
;

-- erase the table if it already exists (ensures data is current to the date query is performed)
DROP TABLE IF EXISTS customer_summary;

-- create the empty table
CREATE TABLE IF NOT EXISTS customer_summary (
	customer_id INT NOT NULL,
	customer_total_rentals INT,
	PRIMARY KEY (customer_id),
	FOREIGN KEY (customer_id)
		REFERENCES customer (customer_id)
); 

-- add values to the table from existing ones in the database
INSERT INTO customer_summary
SELECT
	customer_id,
	customer_total_rentals
FROM
	customer_details
WHERE 
	customer_details.customer_sent_discount = false AND
	-- change this national area value to target other regions
	customer_details.national_area = '1'
ORDER BY customer_total_rentals ASC;
-- COMMIT;
END;
$BODY$;	

-- create the reports
call total_rentals_reports();

select * from customer_details LIMIT 5;
--select * from customer_summary LIMIT 5;

-- trigger function to update both the detail and summary report
CREATE OR REPLACE FUNCTION refresh_reports()
	RETURNS TRIGGER
	LANGUAGE plpgsql
AS $BODY$
BEGIN
	call total_rentals_reports();
RETURN NULL; 
END;
$BODY$;

-- create the trigger itself, which happens any time a record is added to the rentals table
-- if trigger already exists, use this to remove the old trigger:
-- DROP TRIGGER refresh_reports_trigger;
CREATE TRIGGER refresh_reports_trigger
AFTER INSERT
on rental
FOR EACH ROW
EXECUTE PROCEDURE refresh_reports();




-- TODO: didn't use this in the end
/*
-- function to update the customer_details table and calculate the average rental amount
-- this function should be run quarterly
CREATE OR REPLACE FUNCTION calculate_average_rentals()
	RETURNS int
	LANGUAGE plpgsql
AS $BODY$
DECLARE 
	customer_average_rentals integer;
BEGIN
	SELECT AVG(customer_total_rentals)
	INTO customer_average_rentals
	FROM customer_details;
RETURN
	customer_average_rentals;
END;
$BODY$;

-- function to determine if a customer is low frequency or not
-- this function should be run quarterly
CREATE OR REPLACE FUNCTION customer_frequency_checker()
	RETURNS boolean
	LANGUAGE plpgsql
AS $BODY$
BEGIN
	SELECT customer_total_rentals 
	CASE
		WHEN customer_total_rentals < customer_average_rentals()
			THEN RETURN true
		WHEN customer_total_rentals >= customer_average_rentals()
			THEN RETURN false
	END;
	FROM customer_details 
$BODY$;
*/
